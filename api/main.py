import os
import sys
import uuid
from typing import Dict, Tuple, Any

import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, Query, File

project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
print(project_root)
sys.path.append(project_root)

from src.ocr_tesseract.ocr_content_extraction import extract_text_with_pytesseract
from src.ner_distilbert.nel_distilbert import extract_name_and_last_name
from src.ocr_tesseract.ocr_box_coordinates import draw_text_boxes
from src.utils.fuzzy_match import fuzzy_matching
from api.chroma_db import initialize_chroma_db
from src.llm_llama2.ask_llama2 import ask_rag_llama2

app = FastAPI()

# Initialize requitred variables
ALLOWED_IMAGE_EXTENSIONS = ["jpg", "jpeg", "png", "gif", "bmp", "tiff"]
db_manager = initialize_chroma_db()

@app.get("/")
def index() -> dict:
    return {"data": "You have connected to the local api!"}


@app.post("/get_image_names")
async def get_image_names(
    file: UploadFile = File(...),
    in_name: str = Query(..., description="Name parameter"),
    in_last_name: str = Query(..., description="Last Name parameter")
) -> dict[str, Any]:
    """
    Extract image names and coordinates from an uploaded image file.
    This endpoint accepts an image file and two query parameters (name and last name).
    It processes the image to extract text using OCR, identifies names within the text,
    calculates bounding box coordinates for the specified name and last name, performs
    fuzzy matching on the extracted names, and adds the extracted text to a database
    collection.
    Args:
        file (UploadFile): The uploaded image file.
        in_name (str): The name parameter to search for in the extracted text.
        in_last_name (str): The last name parameter to search for in the extracted text.
    Returns:
        dict[str, Any]: A dictionary containing the coordinates of the name and last name
        in the image, and the results of fuzzy matching for the name and last name.
    Raises:
        HTTPException: If the file extension is invalid, if no text is extracted,
        if the extracted names or last names are empty, or for other errors during
        processing.
    """
    try:
        file_ext = file.filename.split('.').pop()
        if file_ext not in ALLOWED_IMAGE_EXTENSIONS:
            raise HTTPException(status_code=400, detail="Invalid file extension. Please upload an image file.")
        file_bytes = await file.read()
        # OCR text extraction step
        extracted_text = extract_text_with_pytesseract([dict({0: file_bytes})])
        if not extracted_text.strip():
            raise HTTPException(status_code=400, detail="No text extracted from the image.")
        # NEL names extraction step
        subject_names = extract_name_and_last_name(extracted_text)
        if not subject_names['name'] or not subject_names['last_name']:
            raise HTTPException(status_code=400, detail="Extracted names or last names are empty.")
        # Bounding Box Coordinates step
        name_coords = draw_text_boxes(file_bytes, [in_name])[0]
        last_coords = draw_text_boxes(file_bytes, [in_last_name])[0]
        # Fuzzy results step
        name_matches = fuzzy_matching(in_name, subject_names.get('name', []))[0]
        last_matches = fuzzy_matching(in_last_name, subject_names.get('last_name', []))[0]
        # Adding items to the collection
        documents = [extracted_text]
        ids = [str(uuid.uuid4()) for _ in documents]
        db_manager.add_to_collection(documents, ids)
        return {"name_xywh_coord": name_coords,
                "last_xywh_coord": last_coords,
                "fuzzy_name_results": name_matches,
                "fuzzy_last_results": last_matches
                }

    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/rag_question")
async def get_image_names(
    question: str = Query(..., description="Question for the model"),
) -> dict:
    """
    Retrieve answer to a question from the RAG (Retrieval-Augmented Generation) model.
    This endpoint accepts a question as input and retrieves the answer from a
    RAG (Retrieval-Augmented Generation) model. It retrieves relevant documents
    from the database based on the question, generates an answer using the RAG
    model, and returns the answer.
    Args:
        question (str): The question for the RAG model.
    Returns:
        dict: A dictionary containing the answer generated by the RAG model.
    Raises:
        HTTPException: If there is an error during processing.
    """
    try:
        n_results = 2
        db_results = db_manager.retrieve_collections(question, n_results)
        db_documents = db_results.get('documents', [[]])
        llm_answer = ask_rag_llama2(question, '\n'.join(db_documents[0]))
        return {"answer": llm_answer}

    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", reload=True)